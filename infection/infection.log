Escaped mutants:
================

1) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Model/ProductRepository.php:101    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function createNewProduct(int $mainId, string $displayName, string $productName, string $description, string $price) : void
     {
-        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . "', '" . $description . "', '" . $price . "')";
+        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . $productName . "', '" . "', '" . $description . "', '" . $price . "')";
         $this->pdo->query($queryString);
     }
 }


2) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Model/ProductRepository.php:101    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function createNewProduct(int $mainId, string $displayName, string $productName, string $description, string $price) : void
     {
-        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . "', '" . $description . "', '" . $price . "')";
+        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . "', '" . $description . "', '" . $price . "')";
         $this->pdo->query($queryString);
     }
 }


3) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Model/ProductRepository.php:101    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function createNewProduct(int $mainId, string $displayName, string $productName, string $description, string $price) : void
     {
-        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . "', '" . $description . "', '" . $price . "')";
+        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . "', '" . $productName . $description . "', '" . $price . "')";
         $this->pdo->query($queryString);
     }
 }


4) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Model/ProductRepository.php:101    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function createNewProduct(int $mainId, string $displayName, string $productName, string $description, string $price) : void
     {
-        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . "', '" . $description . "', '" . $price . "')";
+        $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . $description . "', '" . "', '" . $price . "')";
         $this->pdo->query($queryString);
     }
 }


5) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Model/ProductRepository.php:102    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function createNewProduct(int $mainId, string $displayName, string $productName, string $description, string $price) : void
     {
         $queryString = "INSERT INTO products (mainId, displayName, productName, description, price) VALUES (" . $mainId . ", '" . $displayName . "', '" . $productName . "', '" . $description . "', '" . $price . "')";
-        $this->pdo->query($queryString);
+        
     }
 }


6) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:26    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($this->is_blank($userName)) {
             $this->errors[] = 'Username cannot be blank';
             $userNameValid = false;
-        } elseif (!$this->has_length($userName, ['min' => 3, 'max' => 20])) {
+        } elseif (!$this->has_length($userName, ['min' => 4, 'max' => 20])) {
             $this->errors[] = 'Username must be between 3 and 20 characters long';
             $userNameValid = false;
         } elseif (!$this->isAUniqueUserName($userName)) {


7) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:64    [M] LogicalOr

--- Original
+++ New
@@ @@
     public function checkIfPasswordIsValid(string $password, string $confirmPassword) : bool
     {
         $passwordValid = true;
-        if ($this->is_blank($password) || $this->is_blank($confirmPassword)) {
+        if ($this->is_blank($password) && $this->is_blank($confirmPassword)) {
             $this->errors[] = 'Password cannot be blank';
             $passwordValid = false;
         }


8) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:66    [M] FalseValue

--- Original
+++ New
@@ @@
         $passwordValid = true;
         if ($this->is_blank($password) || $this->is_blank($confirmPassword)) {
             $this->errors[] = 'Password cannot be blank';
-            $passwordValid = false;
+            $passwordValid = true;
         }
         if (!$this->has_length($confirmPassword, ['min' => 8])) {
             $this->errors[] = 'Password must be at least 8 characters long';


9) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:68    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $this->errors[] = 'Password cannot be blank';
             $passwordValid = false;
         }
-        if (!$this->has_length($confirmPassword, ['min' => 8])) {
+        if (!$this->has_length($confirmPassword, ['min' => 7])) {
             $this->errors[] = 'Password must be at least 8 characters long';
             $passwordValid = false;
         }


10) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:68    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->errors[] = 'Password cannot be blank';
             $passwordValid = false;
         }
-        if (!$this->has_length($confirmPassword, ['min' => 8])) {
+        if (!$this->has_length($confirmPassword, [])) {
             $this->errors[] = 'Password must be at least 8 characters long';
             $passwordValid = false;
         }


11) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:70    [M] FalseValue

--- Original
+++ New
@@ @@
         }
         if (!$this->has_length($confirmPassword, ['min' => 8])) {
             $this->errors[] = 'Password must be at least 8 characters long';
-            $passwordValid = false;
+            $passwordValid = true;
         }
         if (!password_verify($confirmPassword, $password)) {
             $this->errors[] = 'Passwords has to be the same';


12) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:87    [M] UnwrapTrim

--- Original
+++ New
@@ @@
     }
     private function is_blank(string $value) : bool
     {
-        return !isset($value) || trim($value) === '';
+        return !isset($value) || $value === '';
     }
     private function has_length_greater_than(string $value, int $min) : bool
     {


13) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:87    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     private function is_blank(string $value) : bool
     {
-        return !isset($value) || trim($value) === '';
+        return !isset($value) && trim($value) === '';
     }
     private function has_length_greater_than(string $value, int $min) : bool
     {


14) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:134    [M] Identical

--- Original
+++ New
@@ @@
     {
         $userDataExist = false;
         $userDataArray = $this->login->findUserByName($value);
-        if (isset($userDataArray['userName']) && $userDataArray['userName'] === $value) {
+        if (isset($userDataArray['userName']) && $userDataArray['userName'] !== $value) {
             $userDataExist = true;
         }
         return $userDataExist;


15) /home/jonathanhemmerling/PhpstormProjects/shopix_project/src/Validation/UserDataValidation.php:135    [M] TrueValue

--- Original
+++ New
@@ @@
         $userDataExist = false;
         $userDataArray = $this->login->findUserByName($value);
         if (isset($userDataArray['userName']) && $userDataArray['userName'] === $value) {
-            $userDataExist = true;
+            $userDataExist = false;
         }
         return $userDataExist;
     }


Timed Out mutants:
==================

Skipped mutants:
================
